#include <vector>
#include <iostream>
#include <iterator>
#include <algorithm>
#include <math.h>
using namespace std;


double tree(int left, int right, double between, double amount, double wet, vector<int> &trees){
  if (left + right == 0)
    return 0;

  else if (right == 0){
    int pos = trees[amount - left];
    //trees.erase(trees.begin(), trees.begin()+1);
    double dis{abs( (((amount/2)-left) * between) - pos)};
    return tree(left-1, right, between, amount, wet, trees) + dis; 
  }
  else if (left == 0){
    int pos = trees[amount-right];
    //trees.erase(trees.begin(), trees.begin()+1);
    double dis{pow((pow((pos - (((amount/2)-right) * between)),2)+pow(wet,2)),0.5)};
    return tree(left, right-1, between, amount, wet, trees) + dis; 
  }
  else{
    int pos = trees[amount - (left+right)];
    //trees.erase(trees.begin(), trees.begin()+1);
    double disright{pow((pow((pos - (((amount/2)-right) * between)),2)+pow(wet,2)),0.5)};
    double disleft{abs( (((amount/2)-left) * between) - pos)};
    return min(tree(left-1, right, between, amount, wet, trees) +disleft,
	       tree(left, right-1, between, amount, wet, trees) + disright); 
  } 
}


double calcHyp(double a, double b){


  return pow((pow(a,2)+pow(b,2)),0.5);
  
}


int main(){

  cout.precision(30);
  int amount;
  int len;
  int wet;
  cin >> amount;
  cin >> len;
  cin >> wet;
  vector<int> trees(amount);
  copy(istream_iterator<int>(cin), istream_iterator<int>(), begin(trees));
  sort(begin(trees), end(trees)); //Sorting the drop-off positions
  for (int i : trees)
    cout << i << " ";
  cout << endl;

  double between{len/((amount/2)-1)}; //dist between holes 

  
  double sum{0};
  for (double i = 0; i < amount/2; i++){
    double ibet{i*between};

    //Dist to the next two trees in the vector from position i on left and right side
    cout << abs(trees[0] - i*between)<< endl;
    cout << abs(trees[1] - i*between)<< endl;
    cout << std::abs(trees[0] - i*between)<< endl;
    cout << std::abs(trees[1] - i*between)<< endl;
    
    
    double one{std::abs(trees[0] - ibet)};
    double oned{calcHyp(trees[1] - ibet , wet)};

    //Same as above exept switching left and right with the trees to be planted
    double two{std::abs(trees[1] - i*between)};
    double twod{calcHyp(trees[0] - ibet, wet)};

    //adds the smallest cost to the sum of the two above 
    sum += min(one+oned,two+twod);
    trees.erase(trees.begin(), trees.begin()+2);
    
    }

  

  //double sum{tree(amount/2, amount/2, between, amount, wet, trees)}; 
  cout << sum << endl;
return 0;
}
